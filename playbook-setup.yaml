- name: Download & Install & Configure PostgreSQL BuildFarm Animal
  hosts: buildfarm
  tasks:
    - name: Check if Build Farm is already installed
      ansible.builtin.stat:
        path: "{{ install_path }}/{{ build_farm_version }}-{{ inventory_hostname }}"
      register: dir
    # Use tempdir because some animals may be on the same system.
    - name: Create tempdir
      ansible.builtin.tempfile:
        state: directory
      register: tempdir
      when: not dir.stat.exists
        #- name: A
        #ansible.builtin.debug:
        #var: tempdir
        #when: not dir.stat.exists
    - name: Download PostgreSQL BuildFarm {{ build_farm_version }}
      ansible.builtin.get_url:
        url: "https://buildfarm.postgresql.org/downloads/releases/build-farm-{{ build_farm_version }}.tgz"
        dest: "{{ tempdir.path }}"
      when: not dir.stat.exists
    - name: Unpack PostgreSQL BuildFarm {{ build_farm_version }}
      ansible.builtin.unarchive:
        src: "{{ tempdir.path }}/build-farm-{{ build_farm_version }}.tgz"
        dest: "{{ tempdir.path }}"
        remote_src: true
      when: not dir.stat.exists
    - name: Rename Build Farm directory for this animal {{ inventory_hostname }}
      ansible.builtin.shell:
        cmd: >-
          mv {{ tempdir.path }}/build-farm-{{ build_farm_version }}
          {{ install_path }}/{{ build_farm_version }}-{{ inventory_hostname }}
      when: not dir.stat.exists
    - name: Remove tempdir
      ansible.builtin.file:
        path: "{{ tempdir.path }}"
        state: absent
      when: not dir.stat.exists

- name: Configure Build Farm Animal
  hosts: buildfarm
  tasks:
    - name: Create build-farm.conf file
      ansible.builtin.set_fact:
        build_farm_conf: "{{ install_path }}/{{ build_farm_version }}-{{ inventory_hostname }}/build-farm.conf"
        build_farm_conf_sample: "{{ install_path }}/{{ build_farm_version }}-{{ inventory_hostname }}/build-farm.conf.sample"
    - name: Create build-farm.conf file
      ansible.builtin.copy:
        src: "{{ build_farm_conf_sample }}"
        dest: "{{ build_farm_conf }}"
        remote_src: true
    - name: Set animal name
      ansible.builtin.replace:
        path: "{{ build_farm_conf }}"
        regexp: 'animal => "CHANGEME"'
        replace: 'animal => "{{ inventory_hostname }}"'
    - name: Set secret
      ansible.builtin.replace:
        path: "{{ build_farm_conf }}"
        regexp: 'secret => "CHANGEME"'
        replace: 'secret => "{{ secret }}"'
    - name: Set build_root
      ansible.builtin.replace:
        path: "{{ build_farm_conf }}"
        regexp: 'build_root => undef'
        replace: 'build_root => "$confdir/buildroot"'
      when: build_root is defined
    - name: Set CC
      ansible.builtin.replace:
        path: "{{ build_farm_conf }}"
        regexp: 'ccache gcc'
        replace: '{{ cc }}'
      when: cc is defined
    - name: Set make
      ansible.builtin.replace:
        path: "{{ build_farm_conf }}"
        regexp: "make => 'make'"
        replace: "make => '{{ make }}'"
      when: make is defined
    - name: Set config_opts
      ansible.builtin.replace:
        path: "{{ build_farm_conf }}"
        regexp: '(config_opts =>[\s\S]*?)qw.*'
        replace: |
          config_opts => [
                  qw(
                  {{ config_opts_extra }}
      when: config_opts_extra is defined
    - name: Set email address for failures
      ansible.builtin.replace:
        path: "{{ build_farm_conf }}"
        regexp: 'fail   => \[\]'
        replace: 'fail   => [{{ email }}]'
      when: email is defined
    - name: Set global_lock_dir
      ansible.builtin.replace:
        path: "{{ build_farm_conf }}"
        regexp: 'global_lock_dir => undef'
        replace: 'global_lock_dir => {{ global_lock_dir }}'
      when: global_lock_dir is defined
    - name: Remove BEGIN ANSIBLE MANAGED BLOCK markers
      ansible.builtin.lineinfile:
        path: "{{ build_farm_conf }}"
        regexp: '^# BEGIN ANSIBLE MANAGED BLOCK$'
        state: absent
    - name: Remove END ANSIBLE MANAGED BLOCK markers
      ansible.builtin.lineinfile:
        path: "{{ build_farm_conf }}"
        regexp: '^# END ANSIBLE MANAGED BLOCK$'
        state: absent
